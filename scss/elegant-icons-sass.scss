@charset 'UTF-8';

@import 'icons-list';

$ei-font-path: '/fonts' !default;
$ei-font-filename: 'ElegantIcons' !default;
$ei-font-family: $ei-font-filename !default;
$ei-icon-prefix: 'ei-' !default;

// Add unicode escape backslash
@function unicode($str) {
  @return unquote('\'')+unquote(str-insert($str, '\\', 1))+unquote('\'');
};

@font-face {
  font-family: $ei-font-family;
  src: url('#{$ei-font-path}/#{$ei-font-filename}.eot'),
       url('#{$ei-font-path}/#{$ei-font-filename}.woff2') format('woff2'),
       url('#{$ei-font-path}/#{$ei-font-filename}.woff') format('woff'),
       url('#{$ei-font-path}/#{$ei-font-filename}.ttf') format('truetype'),
       url('#{$ei-font-path}/#{$ei-font-filename}.svg##{$ei-font-filename}') format('svg');
  font-weight: normal;
  font-style: normal;
}

%common-icon-properties {
	font-family: $ei-font-family;
  font-smoothing: antialiased;
	font-style: normal;
  font-variant: normal;
	font-weight: normal;
  line-height: 1;
  speak: none;
	text-transform: none;
}

// Icon definition mixin
@mixin elegant-icon($icon-name, $placement: before) {
  @if ($placement != before or $placement != after) {
    @error 'The icon placement can only be set as \'before\' or \'after\'';
  }

  &::#{$placement} {
    @extend %common-icon-properties;

    content: unicode('#{map-get($ei-icons-list, $icon-name)}');
  }
}

// Set each icon rules
@each $icon-name, $icon-code in $ei-icons-list {
  // Generate sass placeholders
  %#{$ei-icon-prefix}#{$icon-name} {
    @include elegant-icon($icon-name);
  }

  // Generate class selectors
  .#{$ei-icon-prefix} {
    &#{$icon-name} {
      @extend %#{$ei-icon-prefix}#{$icon-name};
    }
  }
}
